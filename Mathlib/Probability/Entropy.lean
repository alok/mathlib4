/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Analysis.SpecialFunctions.Log.Deriv
import Mathlib.Probability.Notation
import Mathlib.Probability.ConditionalProbability

/-!
# Entropy and conditional entropy

## Main definitions

* `measureEntropy`: entropy of a measure
* `entropy`: entropy of a random variable, defined as `measureEntropy (volume.map X)`
* `condEntropy`: conditional entropy of a random variable `X` w.r.t. another one `Y`

## Main statements

* `chain_rule`: `entropy (fun œâ ‚Ü¶ (X œâ, Y œâ)) = entropy Y + condEntropy X Y`

## Notations

* `Hm[Œº] = measureEntropy Œº`
* `H[X] = entropy X`
* `H[X | Y ‚Üê y] = Hm[(‚Ñô[| Y ‚Åª¬π' {y}]).map X]`
* `H[X | Y] = condEntropy X Y`, such that `H[X | Y] = (volume.map Y)[fun y ‚Ü¶ H[X | Y ‚Üê y]]`

-/

open Real MeasureTheory

open scoped ENNReal NNReal Topology ProbabilityTheory BigOperators

section x_log_x

/-! Properties of the function `x ‚Ü¶ x * log x`. -/

namespace Real

lemma tendsto_log_mul_nhds_zero_left :
    Filter.Tendsto (fun x ‚Ü¶ log x * x) (ùìù[<] 0) (ùìù 0) := by
  have h := tendsto_log_mul_rpow_nhds_zero zero_lt_one
  simp only [rpow_one] at h
  have h_eq : ‚àÄ x ‚àà Set.Iio 0, (- (fun x ‚Ü¶ log x * x) ‚àò (fun x ‚Ü¶ |x|)) x = log x * x := by
    intro x hx
    simp only [Set.mem_Iio] at hx
    simp only [Pi.neg_apply, Function.comp_apply, log_abs]
    rw [abs_of_nonpos hx.le]
    simp only [mul_neg, neg_neg]
  refine tendsto_nhdsWithin_congr h_eq ?_
  rw [‚Üê neg_zero]
  refine Filter.Tendsto.neg ?_
  simp only [neg_zero]
  refine h.comp ?_
  refine tendsto_abs_nhdsWithin_zero.mono_left ?_
  refine nhdsWithin_mono 0 (fun x hx ‚Ü¶ ?_)
  simp only [Set.mem_Iio] at hx
  simp only [Set.mem_compl_iff, Set.mem_singleton_iff, hx.ne, not_false_eq_true]

lemma continuous_id_mul_log : Continuous (fun x ‚Ü¶ x * log x) := by
  rw [continuous_iff_continuousAt]
  intro x
  by_cases hx : x = 0
  swap; ¬∑ exact (continuous_id'.continuousAt).mul (continuousAt_log hx)
  rw [hx]
  have h := tendsto_log_mul_rpow_nhds_zero zero_lt_one
  simp only [rpow_one] at h
  have h' : Filter.Tendsto (fun x ‚Ü¶ log x * x) (ùìù[<] 0) (ùìù 0) := tendsto_log_mul_nhds_zero_left
  rw [ContinuousAt, zero_mul]
  suffices Filter.Tendsto (fun x ‚Ü¶ log x * x) (ùìù 0) (ùìù 0) by
    exact this.congr (fun x ‚Ü¶ by rw [mul_comm])
  nth_rewrite 1 [‚Üê nhdsWithin_univ]
  have : (Set.univ : Set ‚Ñù) = Set.Iio 0 ‚à™ Set.Ioi 0 ‚à™ {0} := by
    ext x
    simp only [Set.mem_univ, Set.Iio_union_Ioi, Set.union_singleton, Set.mem_compl_iff,
      Set.mem_singleton_iff, not_true, Set.mem_insert_iff, true_iff]
    exact em _
  rw [this, nhdsWithin_union, nhdsWithin_union]
  simp only [ge_iff_le, nhdsWithin_singleton, sup_le_iff, Filter.nonpos_iff, Filter.tendsto_sup]
  refine ‚ü®‚ü®h', h‚ü©, ?_‚ü©
  rw [Filter.tendsto_pure_left, mul_zero]
  intro s hs
  obtain ‚ü®t, hts, _, h_zero_mem‚ü© := mem_nhds_iff.mp hs
  exact hts h_zero_mem

lemma differentiableOn_id_mul_log : DifferentiableOn ‚Ñù (fun x ‚Ü¶ x * log x) {0}·∂ú :=
  differentiable_id'.differentiableOn.mul differentiableOn_log

lemma deriv_id_mul_log {x : ‚Ñù} (hx : x ‚â† 0) : deriv (fun x ‚Ü¶ x * log x) x = log x + 1 := by
  rw [deriv_mul differentiableAt_id' (differentiableAt_log hx)]
  simp only [deriv_id'', one_mul, deriv_log', ne_eq, add_right_inj]
  exact mul_inv_cancel hx

lemma deriv2_id_mul_log {x : ‚Ñù} (hx : x ‚â† 0) : deriv^[2] (fun x ‚Ü¶ x * log x) x = x‚Åª¬π := by
  simp only [Function.iterate_succ, Function.iterate_zero, Function.comp.left_id,
    Function.comp_apply]
  suffices ‚àÄ·∂† y in (ùìù x), deriv (fun x ‚Ü¶ x * log x) y = log y + 1 by
    refine (Filter.EventuallyEq.deriv_eq this).trans ?_
    rw [deriv_add_const, deriv_log x]
  suffices ‚àÄ·∂† y in (ùìù x), y ‚â† 0 by
    filter_upwards [this] with y hy
    exact deriv_id_mul_log hy
  exact eventually_ne_nhds hx

lemma strictConvexOn_id_mul_log : StrictConvexOn ‚Ñù (Set.Ici (0 : ‚Ñù)) (fun x ‚Ü¶ x * log x) := by
  refine strictConvexOn_of_deriv2_pos (convex_Ici 0) (continuous_id_mul_log.continuousOn) ?_
  intro x hx
  simp only [Set.nonempty_Iio, interior_Ici', Set.mem_Ioi] at hx
  rw [deriv2_id_mul_log hx.ne']
  positivity

lemma convexOn_id_mul_log : ConvexOn ‚Ñù (Set.Ici (0 : ‚Ñù)) (fun x ‚Ü¶ x * log x) :=
  strictConvexOn_id_mul_log.convexOn

lemma id_mul_log_nonneg {x : ‚Ñù} (hx : 1 ‚â§ x) : 0 ‚â§ x * log x :=
  mul_nonneg (zero_le_one.trans hx) (log_nonneg hx)

@[measurability]
lemma measurable_id_mul_log : Measurable (fun x ‚Ü¶ x * log x) :=
  measurable_id'.mul measurable_log

end Real

section aux_lemmas

-- todo: is this somewhere?
lemma integral_eq_sum {S E : Type*} [Fintype S] [MeasurableSpace S] [MeasurableSingletonClass S]
    [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
     (Œº : Measure S) [IsFiniteMeasure Œº] (f : S ‚Üí E) :
    ‚à´ x, f x ‚àÇŒº = ‚àë x, (Œº {x}).toReal ‚Ä¢ (f x) := by
  conv_lhs => rw [‚Üê Measure.sum_smul_dirac Œº]
  have hf : Integrable f Œº := integrable_of_fintype _ _
  have hf' : Integrable f (Measure.sum fun a ‚Ü¶ Œº {a} ‚Ä¢ Measure.dirac a) := by
    rwa [Measure.sum_smul_dirac Œº]
  rw [integral_sum_measure hf']
  simp_rw [integral_smul_measure, integral_dirac]
  rw [tsum_fintype]

/-- `Œº[|s]` is a finite measure whenever `Œº` is finite. -/
instance cond_isFiniteMeasure {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} {Œº : Measure Œ±}
    [IsFiniteMeasure Œº] (s : Set Œ±) :
    IsFiniteMeasure (Œº[|s]) := by
  constructor
  rw [ProbabilityTheory.cond]
  simp only [Measure.smul_toOuterMeasure, OuterMeasure.coe_smul, Pi.smul_apply, MeasurableSet.univ,
    Measure.restrict_apply, Set.univ_inter, smul_eq_mul]
  by_cases hŒºs : Œº s = 0
  ¬∑ simp [hŒºs]
  ¬∑ refine ENNReal.mul_lt_top ?_ (measure_ne_top _ _)
    simp only [ne_eq, ENNReal.inv_eq_top]
    exact hŒºs

lemma cond_eq_zero_of_measure_zero {Œ± : Type*} {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} {s : Set Œ±}
    (hŒºs : Œº s = 0) :
    Œº[|s] = 0 := by
  have : Œº.restrict s = 0 := by simp [hŒºs]
  simp [ProbabilityTheory.cond, this]

end aux_lemmas

section negIdMulLog

/-- The function `x ‚Ü¶ - x * log x` from `‚Ñù` to `‚Ñù`. -/
noncomputable
def negIdMulLog (x : ‚Ñù) : ‚Ñù := - x * log x

@[simp]
lemma negIdMulLog_zero : negIdMulLog (0 : ‚Ñù) = 0 := by simp [negIdMulLog]

@[simp]
lemma negIdMulLog_one : negIdMulLog (1 : ‚Ñù) = 0 := by simp [negIdMulLog]

lemma negIdMulLog_eq_neg : negIdMulLog = fun x ‚Ü¶ - (x * log x) := by simp [negIdMulLog]

lemma negIdMulLog_nonneg {x : ‚Ñù} (h1 : 0 ‚â§ x) (h2 : x ‚â§ 1) : 0 ‚â§ negIdMulLog x := by
  rw [negIdMulLog, neg_mul_comm]
  apply mul_nonneg h1
  simp only [Left.nonneg_neg_iff]
  exact log_nonpos h1 h2

lemma concaveOn_negIdMulLog : ConcaveOn ‚Ñù (Set.Ici (0 : ‚Ñù)) negIdMulLog := by
  rw [negIdMulLog_eq_neg]
  exact convexOn_id_mul_log.neg

lemma h_jensen {S : Type*} [Fintype S] {w : S ‚Üí ‚Ñù} {p : S ‚Üí ‚Ñù} (h0 : ‚àÄ s, 0 ‚â§ w s)
    (h1 : ‚àë s, w s = 1) (hmem : ‚àÄ s, 0 ‚â§ p s) :
    ‚àë s, (w s) * negIdMulLog (p s) ‚â§ negIdMulLog (‚àë s, (w s) * (p s)) := by
  refine ConcaveOn.le_map_sum concaveOn_negIdMulLog ?_ h1 ?_
  ¬∑ simp [h0]
  ¬∑ simp [hmem]

end negIdMulLog

end x_log_x






namespace ProbabilityTheory

variable {Œ© S T : Type*} [mŒ© : MeasurableSpace Œ©]
  [Fintype S] [Fintype T] [MeasurableSpace S] [MeasurableSpace T]

section measureEntropy

variable {Œº : Measure S}

/-- Entropy of a measure on a finite measurable space.

We normalize the measure by `(Œº Set.univ)‚Åª¬π` to extend the entropy definition to finite measures.
What we really want to do is deal with `Œº=0` or `IsProbabilityMeasure Œº`, but we don't have
a typeclass for that (we could create one though).
The added complexity in the expression is not an issue because if `Œº` is a probability measure,
a call to `simp` will simplify `(Œº Set.univ)‚Åª¬π ‚Ä¢ Œº` to `Œº`. -/
noncomputable
def measureEntropy (Œº : Measure S := by volume_tac) : ‚Ñù :=
  ‚àë s, negIdMulLog (((Œº Set.univ)‚Åª¬π ‚Ä¢ Œº) {s}).toReal

lemma measureEntropy_def (Œº : Measure S) :
    measureEntropy Œº = ‚àë s, negIdMulLog (((Œº Set.univ)‚Åª¬π ‚Ä¢ Œº) {s}).toReal := rfl

notation:100 "Hm[" Œº "]" => measureEntropy Œº

@[simp]
lemma measureEntropy_zero : Hm[(0 : Measure S)] = 0 := by
  simp [measureEntropy]

lemma measureEntropy_of_not_isFiniteMeasure (h : ¬¨ IsFiniteMeasure Œº) :
    Hm[Œº] = 0 := by
  simp [measureEntropy, not_isFiniteMeasure_iff.mp h]

lemma measureEntropy_of_isProbabilityMeasure (Œº : Measure S) [IsProbabilityMeasure Œº] :
    Hm[Œº] = ‚àë s, negIdMulLog (Œº {s}).toReal := by
  simp [measureEntropy]

lemma measureEntropy_univ_smul : Hm[(Œº Set.univ)‚Åª¬π ‚Ä¢ Œº] = Hm[Œº] := by
  by_cases hŒº_fin : IsFiniteMeasure Œº
  swap
  ¬∑ rw [measureEntropy_of_not_isFiniteMeasure hŒº_fin]
    rw [not_isFiniteMeasure_iff] at hŒº_fin
    simp [hŒº_fin]
  cases eq_zero_or_neZero Œº with
  | inl hŒº => simp [hŒº]
  | inr hŒº =>
    rw [measureEntropy_def]
    simp only [Measure.smul_toOuterMeasure, OuterMeasure.coe_smul, Pi.smul_apply, smul_eq_mul,
      ENNReal.toReal_mul]
    rw [ENNReal.inv_mul_cancel]
    ¬∑ simp only [inv_one, ENNReal.one_toReal, one_mul]
      simp [measureEntropy]
    ¬∑ simp [hŒº.out]
    ¬∑ exact measure_ne_top _ _

lemma measureEntropy_nonneg (Œº : Measure S) : 0 ‚â§ Hm[Œº] := by
  by_cases hŒº_fin : IsFiniteMeasure Œº
  swap; ¬∑ rw [measureEntropy_of_not_isFiniteMeasure hŒº_fin]
  refine Finset.sum_nonneg (fun s _ ‚Ü¶ negIdMulLog_nonneg ENNReal.toReal_nonneg ?_)
  refine ENNReal.toReal_le_of_le_ofReal zero_le_one ?_
  rw [ENNReal.ofReal_one]
  cases eq_zero_or_neZero Œº with
  | inl hŒº => simp [hŒº]
  | inr hŒº => exact prob_le_one

lemma measureEntropy_le_card_aux (Œº : Measure S) [IsProbabilityMeasure Œº] :
    Hm[Œº] ‚â§ log (Fintype.card S) := by
  cases isEmpty_or_nonempty S with
  | inl h =>
    have : Œº = 0 := Subsingleton.elim _ _
    simp [Fintype.card_eq_zero, this]
  | inr h =>
    set N := Fintype.card S with hN
    have : 0 < N := Fintype.card_pos
    rw [measureEntropy_def]
    simp only [measure_univ, inv_one, one_smul]
    sorry -- use h_jensen, see pfr repo

lemma measureEntropy_le_log_card (Œº : Measure S) : Hm[Œº] ‚â§ log (Fintype.card S) := by
  have h_log_card_nonneg : 0 ‚â§ log (Fintype.card S) := by
    cases isEmpty_or_nonempty S with
    | inl h =>
      rw [Fintype.card_eq_zero]
      simp
    | inr h =>
      refine log_nonneg ?_
      simp only [Nat.one_le_cast]
      exact Fintype.card_pos
  cases eq_zero_or_neZero Œº with
  | inl hŒº =>
    simp only [hŒº, measureEntropy_zero]
    exact h_log_card_nonneg
  | inr hŒº =>
    by_cases hŒº_fin : IsFiniteMeasure Œº
    swap;
    ¬∑ rw [measureEntropy_of_not_isFiniteMeasure hŒº_fin]
      exact h_log_card_nonneg
    rw [‚Üê measureEntropy_univ_smul]
    exact measureEntropy_le_card_aux _

end measureEntropy

section entropy

variable {Œº : Measure Œ©} {X : Œ© ‚Üí S} {Y : Œ© ‚Üí T}

/-- Entropy of a random variable with values in a finite measurable space. -/
noncomputable
def entropy (X : Œ© ‚Üí S) (Œº : Measure Œ© := by volume_tac) := Hm[Œº.map X]

notation3:100 "H[" X "; " Œº "]" => entropy X Œº
notation3:100 "H[" X "]" => entropy X volume
notation3:100 "H[" X "|" Y "‚Üê" y "; " Œº "]" => entropy X (Œº[|Y ‚Åª¬π' {y}])
notation3:100 "H[" X "|" Y "‚Üê" y "]" => entropy X (‚Ñô[|Y ‚Åª¬π' {y}])

lemma entropy_def (X : Œ© ‚Üí S) (Œº : Measure Œ©) : entropy X Œº = Hm[Œº.map X] := rfl

lemma entropy_nonneg (X : Œ© ‚Üí S) (Œº : Measure Œ©) : 0 ‚â§ entropy X Œº := measureEntropy_nonneg _

lemma entropy_le_log_card (X : Œ© ‚Üí S) (Œº : Measure Œ©) : entropy X Œº ‚â§ log (Fintype.card S) :=
  measureEntropy_le_log_card _

lemma entropy_eq_sum (hX : Measurable X) (Œº : Measure Œ©) [IsProbabilityMeasure Œº] :
    entropy X Œº = ‚àë x, negIdMulLog (Œº.map X {x}).toReal := by
  have : IsProbabilityMeasure (Measure.map X Œº) := isProbabilityMeasure_map hX.aemeasurable
  rw [entropy_def, measureEntropy_of_isProbabilityMeasure]

lemma entropy_cond_eq_sum (hX : Measurable X) (Œº : Measure Œ©) [IsProbabilityMeasure Œº] (y : T) :
    H[X | Y ‚Üê y ; Œº] = ‚àë x, negIdMulLog ((Œº[|Y ‚Åª¬π' {y}]).map X {x}).toReal := by
  by_cases hy : Œº (Y ‚Åª¬π' {y}) = 0
  ¬∑ rw [entropy_def, cond_eq_zero_of_measure_zero hy]
    simp
  ¬∑ have : IsProbabilityMeasure (Œº[|Y ‚Åª¬π' {y}]) := cond_isProbabilityMeasure _ hy
    rw [entropy_eq_sum hX]

end entropy

section condEntropy

variable {X : Œ© ‚Üí S} {Y : Œ© ‚Üí T}

/-- Conditional entropy of a random variable w.r.t. another.
This is the expectation under the law of `Y` of the entropy of the law of `X` conditioned on the
event `Y = y`. -/
noncomputable
def condEntropy (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Œº : Measure Œ© := by volume_tac) : ‚Ñù :=
  (Œº.map Y)[fun y ‚Ü¶ H[X | Y ‚Üê y ; Œº]]

lemma condEntropy_def (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Œº : Measure Œ©) :
    condEntropy X Y Œº = (Œº.map Y)[fun y ‚Ü¶ H[X | Y ‚Üê y ; Œº]] := rfl

notation3:100 "H[" X "|" Y "; " Œº "]" => condEntropy X Y Œº
notation3:100 "H[" X "|" Y "]" => condEntropy X Y volume

lemma condEntropy_nonneg (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Œº : Measure Œ©) : 0 ‚â§ H[X | Y ; Œº] :=
  integral_nonneg (fun _ ‚Ü¶ measureEntropy_nonneg _)

lemma condEntropy_le_log_card (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (hY : Measurable Y) (Œº : Measure Œ©)
    [IsProbabilityMeasure Œº] :
    H[X | Y ; Œº] ‚â§ log (Fintype.card S) := by
  refine (integral_mono_of_nonneg ?_ (integrable_const (log (Fintype.card S))) ?_).trans ?_
  ¬∑ exact ae_of_all _ (fun _ ‚Ü¶ entropy_nonneg _ _)
  ¬∑ exact ae_of_all _ (fun _ ‚Ü¶ entropy_le_log_card _ _)
  ¬∑ have : IsProbabilityMeasure (Œº.map Y) := isProbabilityMeasure_map hY.aemeasurable
    simp

lemma condEntropy_eq_sum [MeasurableSingletonClass T] (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Œº : Measure Œ©)
    [IsProbabilityMeasure Œº] :
    H[X | Y ; Œº] = ‚àë y, (Œº.map Y {y}).toReal * H[X | Y ‚Üê y ; Œº] := by
  rw [condEntropy_def, integral_eq_sum]
  simp_rw [smul_eq_mul]

lemma condEntropy_eq_sum_sum [MeasurableSingletonClass T] (hX : Measurable X) (Y : Œ© ‚Üí T)
    (Œº : Measure Œ©) [IsProbabilityMeasure Œº] :
    H[X | Y ; Œº]
      = ‚àë y, ‚àë x, (Œº.map Y {y}).toReal * negIdMulLog ((Œº[|Y ‚Åª¬π' {y}]).map X {x}).toReal := by
  rw [condEntropy_eq_sum]
  congr with y
  rw [entropy_cond_eq_sum hX, Finset.mul_sum]

lemma condEntropy_eq_sum_prod [MeasurableSingletonClass T] (hX : Measurable X) (Y : Œ© ‚Üí T)
    (Œº : Measure Œ©) [IsProbabilityMeasure Œº] :
    H[X | Y ; Œº] = ‚àë p : S √ó T,
      (Œº.map Y {p.2}).toReal * negIdMulLog ((Œº[|Y ‚Åª¬π' {p.2}]).map X {p.1}).toReal := by
  have h_prod : (Finset.univ : Finset (S √ó T)) = (Finset.univ : Finset S) √óÀ¢ Finset.univ := rfl
  rw [condEntropy_eq_sum_sum hX Y, h_prod, Finset.sum_product_right]

end condEntropy

section pair

variable {X : Œ© ‚Üí S} {Y : Œ© ‚Üí T}

lemma measure_prod_singleton_eq_mul [MeasurableSingletonClass S] [MeasurableSingletonClass T]
    {Œº : Measure Œ©} [IsFiniteMeasure Œº] (hX : Measurable X) (hY : Measurable Y) {p : S √ó T} :
    (Œº.map (fun œâ ‚Ü¶ (X œâ, Y œâ)) {p}).toReal
      = (Œº.map Y {p.2}).toReal * ((Œº[|Y ‚Åª¬π' {p.2}]).map X {p.1}).toReal := by
  have hp_prod : {p} = {p.1} √óÀ¢ {p.2} := by simp
  rw [Measure.map_apply (hX.prod_mk hY) (measurableSet_singleton p)]
  by_cases hpY : Œº (Y ‚Åª¬π' {p.2}) = 0
  ¬∑ rw [cond_eq_zero_of_measure_zero hpY]
    simp only [aemeasurable_zero_measure, not_true, Measure.map_zero, Measure.zero_toOuterMeasure,
      OuterMeasure.coe_zero, Pi.zero_apply, ENNReal.zero_toReal, mul_zero]
    suffices (Œº ((fun a ‚Ü¶ (X a, Y a)) ‚Åª¬π' ({p.1} √óÀ¢ {p.2}))).toReal = 0 by convert this
    rw [Set.mk_preimage_prod, ENNReal.toReal_eq_zero_iff]
    exact Or.inl (measure_mono_null (Set.inter_subset_right _ _) hpY)
  rw [Measure.map_apply hY (measurableSet_singleton p.2)]
  simp_rw [Measure.map_apply hX (measurableSet_singleton _)]
  simp_rw [cond_apply _ (hY (measurableSet_singleton _))]
  rw [ENNReal.toReal_mul, ‚Üê mul_assoc, ENNReal.toReal_inv, mul_inv_cancel, one_mul, hp_prod,
    Set.mk_preimage_prod, Set.inter_comm]
  rw [ENNReal.toReal_ne_zero]; exact ‚ü®hpY, measure_ne_top _ _‚ü©

lemma negIdMulLog_measure_prod_singleton [MeasurableSingletonClass S] [MeasurableSingletonClass T]
    {Œº : Measure Œ©} [IsFiniteMeasure Œº] (hX : Measurable X) (hY : Measurable Y) {p : S √ó T} :
    negIdMulLog (Œº.map (fun œâ ‚Ü¶ (X œâ, Y œâ)) {p}).toReal
      = - ((Œº[|Y ‚Åª¬π' {p.2}]).map X {p.1}).toReal
          * (Œº.map Y {p.2}).toReal* log (Œº.map Y {p.2}).toReal
        - (Œº.map Y {p.2}).toReal * ((Œº[|Y ‚Åª¬π' {p.2}]).map X {p.1}).toReal
          * log ((Œº[|Y ‚Åª¬π' {p.2}]).map X {p.1}).toReal := by
  rw [measure_prod_singleton_eq_mul hX hY]
  by_cases hpY : Œº (Y ‚Åª¬π' {p.2}) = 0
  ¬∑ rw [cond_eq_zero_of_measure_zero hpY]
    simp
  by_cases hpX : (Œº[|Y ‚Åª¬π' {p.2}]).map X {p.1} = 0
  ¬∑ simp [hpX]
  rw [negIdMulLog, log_mul]
  ¬∑ ring
  ¬∑ rw [ENNReal.toReal_ne_zero]
    refine ‚ü®?_, measure_ne_top _ _‚ü©
    rwa [Measure.map_apply hY (measurableSet_singleton _)]
  ¬∑ rw [ENNReal.toReal_ne_zero]
    refine ‚ü®hpX, measure_ne_top _ _‚ü©

lemma chain_rule [MeasurableSingletonClass S] [MeasurableSingletonClass T]
    (Œº : Measure Œ©) [IsProbabilityMeasure Œº] (hX : Measurable X) (hY : Measurable Y) :
    H[fun œâ ‚Ü¶ (X œâ, Y œâ) ; Œº] = H[Y ; Œº] + H[X | Y ; Œº] := by
  have : IsProbabilityMeasure (Œº.map Y) := isProbabilityMeasure_map hY.aemeasurable
  have : IsProbabilityMeasure (Œº.map (fun œâ ‚Ü¶ (X œâ, Y œâ))) :=
    isProbabilityMeasure_map (hX.prod_mk hY).aemeasurable
  rw [entropy_def, measureEntropy_of_isProbabilityMeasure]
  simp_rw [negIdMulLog_measure_prod_singleton hX hY, sub_eq_add_neg, Finset.sum_add_distrib]
  congr
  ¬∑ have h_prod : (Finset.univ : Finset (S √ó T)) = (Finset.univ : Finset S) √óÀ¢ Finset.univ := rfl
    rw [h_prod, Finset.sum_product_right, entropy_def, measureEntropy_of_isProbabilityMeasure]
    congr with y
    simp only [neg_mul, Finset.sum_neg_distrib]
    rw [‚Üê Finset.sum_mul, ‚Üê Finset.sum_mul]
    by_cases hy : Œº (Y ‚Åª¬π' {y}) = 0
    ¬∑ simp [cond_eq_zero_of_measure_zero hy, Measure.map_apply hY, hy]
    have : IsProbabilityMeasure (Œº[|Y ‚Åª¬π' {y}]) := cond_isProbabilityMeasure _ hy
    suffices ‚àë x : S, ((Œº[|Y ‚Åª¬π' {y}]).map X {x}).toReal = 1 by
      rw [this, one_mul, ‚Üê neg_mul, negIdMulLog]
    rw [‚Üê ENNReal.toReal_sum (fun _ _ ‚Ü¶ measure_ne_top _ _), ENNReal.toReal_eq_one_iff]
    simp_rw [Measure.map_apply hX (measurableSet_singleton _)]
    rw [sum_measure_preimage_singleton _ (fun y _ ‚Ü¶ hX (measurableSet_singleton y))]
    simp
  ¬∑ rw [condEntropy_eq_sum_prod hX]
    congr with p
    rw [negIdMulLog]
    ring

end pair

section mutualInformation

variable {U : Type*} [Fintype U] [MeasurableSpace U]
  {X : Œ© ‚Üí S} {Y : Œ© ‚Üí T} {Z : Œ© ‚Üí U} {Œº : Measure Œ©}

/-- Mutual information (TODO docstring). -/
noncomputable
def mutualInformation (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Œº : Measure Œ© := by volume_tac) : ‚Ñù :=
  H[X ; Œº] + H[Y ; Œº] - H[fun œâ ‚Ü¶ (X œâ, Y œâ) ; Œº]

lemma mutualInformation_def (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Œº : Measure Œ©) :
  mutualInformation X Y Œº = H[X ; Œº] + H[Y ; Œº] - H[fun œâ ‚Ü¶ (X œâ, Y œâ) ; Œº] := rfl

notation3:100 "I[" X ":" Y ";" Œº "]" => mutualInformation X Y Œº
notation3:100 "I[" X ":" Y "]" => mutualInformation X Y volume

lemma mutualInformation_eq_entropy_sub_condEntropy [MeasurableSingletonClass S]
    [MeasurableSingletonClass T] (hX : Measurable X) (hY : Measurable Y) (Œº : Measure Œ©)
    [IsProbabilityMeasure Œº] :
    I[X : Y ; Œº] = H[X ; Œº] - H[X | Y ; Œº] := by
  rw [mutualInformation_def, chain_rule Œº hX hY]
  abel

noncomputable
def condMutualInformation (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Z : Œ© ‚Üí U) (Œº : Measure Œ© := by volume_tac) :
    ‚Ñù := (Œº.map Z)[fun z ‚Ü¶ H[X | Z ‚Üê z ; Œº] + H[Y | Z ‚Üê z ; Œº] - H[fun œâ ‚Ü¶ (X œâ, Y œâ) | Z ‚Üê z ; Œº]]

lemma condMutualInformation_def (X : Œ© ‚Üí S) (Y : Œ© ‚Üí T) (Z : Œ© ‚Üí U) (Œº : Measure Œ©) :
    condMutualInformation X Y Z Œº = (Œº.map Z)[fun z ‚Ü¶
      H[X | Z ‚Üê z ; Œº] + H[Y | Z ‚Üê z ; Œº] - H[fun œâ ‚Ü¶ (X œâ, Y œâ) | Z ‚Üê z ; Œº]] := rfl

lemma condMutualInformation_eq_integral_mutualInformation :
    condMutualInformation X Y Z Œº = (Œº.map Z)[fun z ‚Ü¶ I[X : Y ; Œº[|Z ‚Åª¬π' {z}]]] := rfl

end mutualInformation

end ProbabilityTheory



section MeasureSpace_example

open ProbabilityTheory

variable {Œ© S T : Type*} [MeasureSpace Œ©] [IsProbabilityMeasure (‚Ñô : Measure Œ©)]
  [Fintype S] [MeasurableSpace S] [MeasurableSingletonClass S]
  [Fintype T] [MeasurableSpace T] [MeasurableSingletonClass T]
  {X : Œ© ‚Üí S} {Y : Œ© ‚Üí T}

example (hX : Measurable X) (hY : Measurable Y) :
  H[fun œâ ‚Ü¶ (X œâ, Y œâ)] = H[Y] + H[X | Y] := chain_rule _ hX hY

end MeasureSpace_example
