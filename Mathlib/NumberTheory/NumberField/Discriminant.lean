/-
Copyright (c) 2023 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Data.Real.Pi.Bounds
import Mathlib.NumberTheory.NumberField.CanonicalEmbedding
import Mathlib.NumberTheory.NumberField.Units
import Mathlib.RingTheory.Localization.NormTrace

/-!
# Number field discriminant
This file defines the discriminant of a number field.

## Main definitions

* `NumberField.discr`: the absolute discriminant of a number field.

## Main result

* `NumberField.discr_gt_one`: **Hermite-Minkowski Theorem**. A nontrivial number field has
nontrivial discriminant.

## Tags
number field, discriminant
-/

-- TODO. Rewrite some of the FLT results on the disciminant using the definitions and results of
-- this file

local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

namespace NumberField

open Classical NumberField Matrix NumberField.InfinitePlace FiniteDimensional

open scoped Real

variable (K : Type*) [Field K] [NumberField K]

/-- The absolute discriminant of a number field. -/
noncomputable abbrev discr : ‚Ñ§ := Algebra.discr ‚Ñ§ (RingOfIntegers.basis K)

theorem coe_discr : (discr K : ‚Ñö) = Algebra.discr ‚Ñö (integralBasis K) :=
  (Algebra.discr_localizationLocalization ‚Ñ§ _ K (RingOfIntegers.basis K)).symm

theorem discr_ne_zero : discr K ‚â† 0 := by
  rw [‚Üê (Int.cast_injective (Œ± := ‚Ñö)).ne_iff, coe_discr]
  exact Algebra.discr_not_zero_of_basis ‚Ñö (integralBasis K)

theorem discr_eq_discr {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (b : Basis Œπ ‚Ñ§ (ùìû K)) :
    Algebra.discr ‚Ñ§ b = discr K := by
  let b‚ÇÄ := Basis.reindex (RingOfIntegers.basis K) (Basis.indexEquiv (RingOfIntegers.basis K) b)
  rw [Algebra.discr_eq_discr (ùìû K) b b‚ÇÄ, Basis.coe_reindex, Algebra.discr_reindex]

open MeasureTheory MeasureTheory.Measure Zspan NumberField.mixedEmbedding
  NumberField.InfinitePlace ENNReal NNReal Complex

theorem _root_.NumberField.mixedEmbedding.volume_fundamentalDomain_latticeBasis :
    volume (fundamentalDomain (latticeBasis K)) =
      (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ NrComplexPlaces K * sqrt ‚Äñdiscr K‚Äñ‚Çä := by
  let f : Module.Free.ChooseBasisIndex ‚Ñ§ (ùìû K) ‚âÉ (K ‚Üí+* ‚ÑÇ) :=
    (canonicalEmbedding.latticeBasis K).indexEquiv (Pi.basisFun ‚ÑÇ _)
  let e : (index K) ‚âÉ Module.Free.ChooseBasisIndex ‚Ñ§ (ùìû K) := (indexEquiv K).trans f.symm
  let M := (mixedEmbedding.stdBasis K).toMatrix ((latticeBasis K).reindex e.symm)
  let N := Algebra.embeddingsMatrixReindex ‚Ñö ‚ÑÇ (integralBasis K ‚àò f.symm)
    RingHom.equivRatAlgHom
  suffices M.map Complex.ofReal = (matrixToStdBasis K) *
      (Matrix.reindex (indexEquiv K).symm (indexEquiv K).symm N).transpose by
    calc volume (fundamentalDomain (latticeBasis K))
      _ = ‚Äñ((mixedEmbedding.stdBasis K).toMatrix ((latticeBasis K).reindex e.symm)).det‚Äñ‚Çä := by
        rw [‚Üê fundamentalDomain_reindex _ e.symm, ‚Üê norm_toNNReal, measure_fundamentalDomain
          ((latticeBasis K).reindex e.symm), volume_fundamentalDomain_stdBasis, mul_one]
        rfl
      _ = ‚Äñ(matrixToStdBasis K).det * N.det‚Äñ‚Çä := by
        rw [‚Üê nnnorm_real, ‚Üê ofReal_eq_coe, RingHom.map_det, RingHom.mapMatrix_apply, this,
          det_mul, det_transpose, det_reindex_self]
      _ = (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ Fintype.card {w : InfinitePlace K // IsComplex w} * sqrt ‚ÄñN.det ^ 2‚Äñ‚Çä := by
        have : ‚ÄñComplex.I‚Äñ‚Çä = 1 := by rw [‚Üê norm_toNNReal, norm_eq_abs, abs_I, Real.toNNReal_one]
        rw [det_matrixToStdBasis, nnnorm_mul, nnnorm_pow, nnnorm_mul, this, mul_one, nnnorm_inv,
          coe_mul, ENNReal.coe_pow, ‚Üê norm_toNNReal, IsROrC.norm_two, Real.toNNReal_ofNat,
          coe_inv two_ne_zero, coe_ofNat, nnnorm_pow, NNReal.sqrt_sq]
      _ = (2 : ‚Ñù‚â•0‚àû)‚Åª¬π ^ Fintype.card { w // IsComplex w } * NNReal.sqrt ‚Äñdiscr K‚Äñ‚Çä := by
        rw [‚Üê Algebra.discr_eq_det_embeddingsMatrixReindex_pow_two, Algebra.discr_reindex,
          ‚Üê coe_discr, map_intCast, ‚Üê Complex.nnnorm_int]
  ext : 2
  dsimp only
  rw [Matrix.map_apply, Basis.toMatrix_apply, Basis.coe_reindex, Function.comp_apply,
    Equiv.symm_symm, latticeBasis_apply, ‚Üê commMap_canonical_eq_mixed, Complex.ofReal_eq_coe,
    stdBasis_repr_eq_matrixToStdBasis_mul K _ (fun _ => rfl)]
  rfl

theorem exists_ne_zero_mem_ringOfIntegers_of_norm_le_mul_sqrt_discr :
    ‚àÉ (a : ùìû K), a ‚â† 0 ‚àß
      |Algebra.norm ‚Ñö (a:K)| ‚â§ (4 / œÄ) ^ NrComplexPlaces K *
        (finrank ‚Ñö K).factorial / (finrank ‚Ñö K) ^ (finrank ‚Ñö K) * Real.sqrt |discr K| := by
  -- The smallest possible value for `exists_ne_zero_mem_ringOfIntegers_of_norm_le`
  let B := (minkowskiBound K * (convexBodySumFactor K)‚Åª¬π).toReal ^ (1 / (finrank ‚Ñö K : ‚Ñù))
  have hB : 0 ‚â§ B := Real.rpow_nonneg_of_nonneg toReal_nonneg _
  have h_le : (minkowskiBound K) ‚â§ volume (convexBodySum K B) := by
    refine le_of_eq ?_
    rw [convexBodySum_volume, ‚Üê ENNReal.ofReal_pow hB, ‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_mul
      toReal_nonneg, div_mul_cancel _ (Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)), Real.rpow_one,
      ofReal_toReal, mul_comm, mul_assoc, ENNReal.inv_mul_cancel (convexBodySumFactor_ne_zero K)
      (convexBodySumFactor_ne_top K), mul_one]
    exact mul_ne_top (ne_of_lt (minkowskiBound_lt_top K))
      (ENNReal.inv_ne_top.mpr (convexBodySumFactor_ne_zero K))
  obtain ‚ü®x, h_nz, h_bd‚ü© := exists_ne_zero_mem_ringOfIntegers_of_norm_le K h_le
  refine ‚ü®x, h_nz, ?_‚ü©
  convert h_bd
  rw [div_pow B, ‚Üê Real.rpow_nat_cast B, ‚Üê Real.rpow_mul (by positivity), div_mul_cancel _
    (Nat.cast_ne_zero.mpr <| ne_of_gt finrank_pos), Real.rpow_one, Nat.cast_pow, mul_comm_div,
    mul_div_assoc']
  congr 1
  rw [eq_comm]
  calc
    _ = (2:‚Ñù)‚Åª¬π ^ NrComplexPlaces K * sqrt ‚Äñdiscr K‚Äñ‚Çä * (2:‚Ñù) ^ finrank ‚Ñö K *
          ((2:‚Ñù) ^ NrRealPlaces K * (œÄ / 2) ^ NrComplexPlaces K /
          (Nat.factorial (finrank ‚Ñö K)))‚Åª¬π := by
      simp_rw [minkowskiBound, convexBodySumFactor, volume_fundamentalDomain_latticeBasis,
        toReal_mul, toReal_inv, toReal_div, toReal_mul, coe_toReal, toReal_pow, toReal_inv,
        toReal_ofNat, mixedEmbedding.finrank, NNReal.coe_pow, NNReal.coe_div, coe_real_pi,
        NNReal.coe_ofNat, toReal_nat]
    _ = (2:‚Ñù) ^ (finrank ‚Ñö K - NrComplexPlaces K - NrRealPlaces K + NrComplexPlaces K : ‚Ñ§) *
          Real.sqrt ‚Äñdiscr K‚Äñ * Nat.factorial (finrank ‚Ñö K) * œÄ‚Åª¬π ^ (NrComplexPlaces K) := by
      simp_rw [inv_div, div_eq_mul_inv, mul_inv, ‚Üê zpow_neg_one, ‚Üê zpow_coe_nat, mul_zpow,
        ‚Üê zpow_mul, neg_one_mul, mul_neg_one, neg_neg, Real.coe_sqrt, coe_nnnorm, sub_eq_add_neg,
        zpow_add‚ÇÄ (two_ne_zero : (2:‚Ñù) ‚â† 0)]
      ring
    _ = (2:‚Ñù) ^ (2 * NrComplexPlaces K : ‚Ñ§) * Real.sqrt ‚Äñdiscr K‚Äñ * Nat.factorial (finrank ‚Ñö K) *
          œÄ‚Åª¬π ^ (NrComplexPlaces K) := by
      congr
      rw [‚Üê card_add_two_mul_card_eq_rank, Nat.cast_add, Nat.cast_mul, Nat.cast_ofNat]
      ring
    _ = (4 / œÄ) ^ NrComplexPlaces K * (finrank ‚Ñö K).factorial * Real.sqrt |discr K| := by
      rw [show ‚Äñdiscr K‚Äñ = |(discr K : ‚Ñù)| by rfl, zpow_mul, show (2:‚Ñù) ^ (2:‚Ñ§) = 4 by norm_cast,
        div_pow, inv_eq_one_div, div_pow, one_pow, zpow_coe_nat]
      ring

/-- **Hermite-Minkowski Theorem**. A nontrivial number field has nontrivial discriminant. -/
theorem discr_gt_one (h : 1 < finrank ‚Ñö K) : 1 < |discr K| := by
  suffices 1 < Real.sqrt |(discr K)| by
    rwa [Real.lt_sqrt zero_le_one, one_pow, ‚Üê Int.cast_abs, ‚Üê Int.cast_one, Int.cast_lt] at this
  let a : ‚Ñï ‚Üí ‚Ñù := fun n => n ^ n / (Real.sqrt 2 ^ n * n.factorial)
  -- We prove by induction that `2 ‚â§ n ‚Üí 1 ‚â§ a n`. The result will follow from this and the fact
  -- that `a n < Real.sqrt |(discr K)|` where `n = finrank ‚Ñö K` that we prove next.
  have h_a : ‚àÄ n, 2 ‚â§ n ‚Üí 1 ‚â§ a n := by
    intro n hn
    induction n, hn using Nat.le_induction with
    | base => norm_num [Nat.factorial_two]
    | succ m _ h_m =>
        suffices Real.sqrt 2 ‚â§ ((1:‚Ñù) + 1 / m) ^ m by
          convert_to 1 ‚â§ (a m) * ((1:‚Ñù) + 1 / m) ^ m / Real.sqrt 2
          ¬∑ simp_rw [Nat.factorial_succ, pow_succ]
            field_simp; ring
          ¬∑ rw [_root_.le_div_iff (by positivity)]
            exact mul_le_mul h_m this (by positivity) (by positivity)
        refine le_trans ?_ (one_add_mul_le_pow ?_ m)
        ¬∑ rw [‚Üê inv_eq_one_div, mul_inv_cancel, one_add_one_eq_two, Real.sqrt_le_iff]
          ¬∑ exact ‚ü®zero_le_two, by norm_num‚ü©
          ¬∑ exact Nat.cast_ne_zero.mpr (by linarith)
        ¬∑ exact le_trans (by linarith : (-2:‚Ñù) ‚â§ 0) (by positivity)
  suffices a (finrank ‚Ñö K) < Real.sqrt |(discr K)| from lt_of_le_of_lt (h_a (finrank ‚Ñö K) h) this
  -- It remains to prove that `a n < Real.sqrt |(discr K)|` where `n = finrank ‚Ñö K`. For that,
  -- we obtain an nonzero alg. integer `x` of small absolute norm using
  -- `exists_ne_zero_mem_ringOfIntegers_of_norm_le_mul_sqrt_discr` and use the fact that
  -- `1 ‚â§ |Norm x|`.
  obtain ‚ü®x, h_nz, h_bd‚ü© := exists_ne_zero_mem_ringOfIntegers_of_norm_le_mul_sqrt_discr K
  have h_nm : (1:‚Ñù) ‚â§ |(Algebra.norm ‚Ñö) (x:K)| := by
    rw [‚Üê Algebra.coe_norm_int, ‚Üê Int.cast_one, ‚Üê Int.cast_abs, Rat.cast_coe_int, Int.cast_le]
    exact Int.one_le_abs (Algebra.norm_ne_zero_iff.mpr h_nz)
  replace h_bd := le_trans h_nm h_bd
  rw [‚Üê inv_mul_le_iff (by positivity), inv_div, mul_one] at h_bd
  refine lt_of_lt_of_le ?_ h_bd
  refine div_lt_div_of_lt_left (by positivity) (by positivity) ?_
  refine mul_lt_mul_of_pos_right ?_ (by positivity)
  -- Some inequalities on `œÄ` that will be useful later on
  have ineq‚ÇÅ : 1 ‚â§ 4 / œÄ := by
    rw [_root_.le_div_iff Real.pi_pos, one_mul]
    exact Real.pi_le_four
  have ineq‚ÇÇ : 4 / œÄ < 2 := by
    rw [_root_.div_lt_iff Real.pi_pos, ‚Üê _root_.div_lt_iff'  zero_lt_two]
    linarith [Real.pi_gt_three]
  rw [‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_div_two_eq_sqrt _ zero_le_two]
  refine lt_of_le_of_lt (Real.rpow_le_rpow_of_exponent_le ineq‚ÇÅ ?_)
    (Real.rpow_lt_rpow (by linarith) ineq‚ÇÇ (by positivity))
  rw [_root_.le_div_iff zero_lt_two, mul_comm, ‚Üê Nat.cast_two, ‚Üê Nat.cast_mul, Nat.cast_le,
    ‚Üê card_add_two_mul_card_eq_rank]
  exact Nat.le_add_left _ _

end NumberField

namespace Rat

open NumberField

/-- The absolute discriminant of the number field `‚Ñö` is 1. -/
@[simp]
theorem numberField_discr : discr ‚Ñö = 1 := by
  let b : Basis (Fin 1) ‚Ñ§ (ùìû ‚Ñö) :=
    Basis.map (Basis.singleton (Fin 1) ‚Ñ§) ringOfIntegersEquiv.toAddEquiv.toIntLinearEquiv.symm
  calc NumberField.discr ‚Ñö
    _ = Algebra.discr ‚Ñ§ b := by convert (discr_eq_discr ‚Ñö b).symm
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) (b default * b default) := by
      rw [Algebra.discr_def, Matrix.det_unique, Algebra.traceMatrix_apply, Algebra.traceForm_apply]
    _ = Algebra.trace ‚Ñ§ (ùìû ‚Ñö) 1 := by
      rw [Basis.map_apply, RingEquiv.toAddEquiv_eq_coe, AddEquiv.toIntLinearEquiv_symm,
        AddEquiv.coe_toIntLinearEquiv, Basis.singleton_apply,
        show (AddEquiv.symm ‚ÜëringOfIntegersEquiv) (1 : ‚Ñ§) = ringOfIntegersEquiv.symm 1 by rfl,
        map_one, mul_one]
    _ = 1 := by rw [Algebra.trace_eq_matrix_trace b]; norm_num

alias _root_.NumberField.discr_rat := numberField_discr

end Rat
