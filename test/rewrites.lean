import Mathlib.Tactic.Rewrites
import Mathlib.Data.Nat.Prime
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.Data.List.Basic
import Mathlib.Algebra.Group.Basic

private axiom test_sorry : ‚àÄ {Œ±}, Œ±
set_option autoImplicit true
set_option pp.unicode.fun true

-- To see the (sorted) list of lemmas that `rw?` will try rewriting by, use:
-- set_option trace.Tactic.rewrites.lemmas true

-- Recall that `rw?` caches the discrimination tree on disk.
-- If you are modifying the way that `rewrites` indexes lemmas,
-- while testing you will probably want to delete
-- `build/lib/MathlibExtras/Rewrites.extra`
-- so that the cache is rebuilt.

set_option autoImplicit true

/--
info: Try this: rw [@List.map_append]
-- "no goals"
-/
#guard_msgs in
example (f : Œ± ‚Üí Œ≤) (L M : List Œ±) : (L ++ M).map f = L.map f ++ M.map f := by
  rw?

open CategoryTheory

/--
info: Try this: rw [@Category.id_comp]
-- "no goals"
-/
#guard_msgs in
example [Category C] {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : f ‚â´ ùüô _ ‚â´ g = f ‚â´ g := by
  rw?

/--
info: Try this: rw [@mul_left_eq_self]
-- "no goals"
-/
#guard_msgs in
example [Group G] (h : G) : 1 * h = h := by
  rw?

/--
info: Try this: rw [‚Üê @Nat.prime_iff]
-- "no goals"
-/
#guard_msgs in
lemma prime_of_prime (n : ‚Ñï) : Prime n ‚Üî Nat.Prime n := by
  rw?

/--
info: Try this: rw [@mul_one] at hyp
-- g = h
---
info: Try this: rw [‚Üê @eq_div_iff_mul_eq'] at hyp
-- g = h / 1
---
info: Try this: rw [‚Üê @eq_mul_inv_iff_mul_eq] at hyp
-- g = h * 1‚Åª¬π
---
info: Try this: rw [‚Üê @eq_inv_mul_iff_mul_eq] at hyp
-- 1 = g‚Åª¬π * h
---
info: Try this: rw [‚Üê smul_eq_mul] at hyp
-- g ‚Ä¢ 1 = h
---
info: Try this: rw [‚Üê @div_inv_eq_mul] at hyp
-- g / 1‚Åª¬π = h
---
info: Try this: rw [‚Üê @Equiv.divRight_symm_apply] at hyp
-- ‚Üë(Equiv.divRight 1).symm g = h
---
info: Try this: rw [‚Üê @inv_one] at hyp
-- g * 1‚Åª¬π = h
---
info: Try this: rw [‚Üê @ofLex_one] at hyp
-- g * ‚ÜëofLex 1 = h
---
info: Try this: rw [‚Üê @ofDual_one] at hyp
-- g * ‚ÜëOrderDual.ofDual 1 = h
---
info: Try this: rw [‚Üê @toMul_zero] at hyp
-- g * ‚ÜëAdditive.toMul 0 = h
---
info: Try this: rw [‚Üê @one_div_one] at hyp
-- g * (1 / 1) = h
---
info: Try this: rw [‚Üê @Units.val_one] at hyp
-- g * ‚Üë1 = h
---
info: Try this: rw [‚Üê @WithBot.unbot_one] at hyp
-- g * WithBot.unbot 1 _ = h
---
info: Try this: rw [‚Üê @WithTop.untop_one] at hyp
-- g * WithTop.untop 1 _ = h
---
info: Try this: rw [‚Üê MulOpposite.unop_one] at hyp
-- g * MulOpposite.unop 1 = h
---
info: Try this: rw [‚Üê @AddOpposite.unop_one] at hyp
-- g * AddOpposite.unop 1 = h
-/
#guard_msgs in
example [Group G] (h : G) (hyp : g * 1 = h) : g = h := by
  rw? at hyp
  assumption

/--
info: Try this: rw [@Nat.le_iff_lt_or_eq]
-- x < y ‚à® x = y
---
info: Try this: rw [@Nat.mul_self_le_mul_self_iff]
-- x * x ‚â§ y * y
---
info: Try this: rw [@le_iff_eq_or_lt]
-- x = y ‚à® x < y
---
info: Try this: rw [@le_iff_exists_add]
-- ‚àÉ c, y = x + c
---
info: Try this: rw [@le_iff_exists_sup]
-- ‚àÉ c, y = x ‚äî c
---
info: Try this: rw [@le_iff_exists_add']
-- ‚àÉ c, y = c + x
---
info: Try this: rw [‚Üê @Nat.le_eq]
-- Nat.le x y
---
info: Try this: rw [‚Üê @Nat.ble_eq]
-- Nat.ble x y = true
---
info: Try this: rw [‚Üê @Nat.not_lt]
-- ¬¨y < x
---
info: Try this: rw [‚Üê @Nat.lt_succ]
-- x < Nat.succ y
---
info: Try this: rw [‚Üê @Int.ofNat_le]
-- ‚Üëx ‚â§ ‚Üëy
---
info: Try this: rw [‚Üê Nat.not_gt_eq]
-- ¬¨x > y
---
info: Try this: rw [‚Üê @List.range_subset]
-- List.range x ‚äÜ List.range y
---
info: Try this: rw [‚Üê @Nat.lt_one_add_iff]
-- x < 1 + y
---
info: Try this: rw [‚Üê @Nat.lt_add_one_iff]
-- x < y + 1
---
info: Try this: rw [‚Üê @List.range_sublist]
-- List.Sublist (List.range x) (List.range y)
---
info: Try this: rw [‚Üê @String.Pos.mk_le_mk]
-- { byteIdx := x } ‚â§ { byteIdx := y }
---
info: Try this: rw [‚Üê @Nat.bit0_lt_bit1_iff]
-- bit0 x < bit1 y
---
info: Try this: rw [‚Üê @Nat.bit0_le_bit1_iff]
-- bit0 x ‚â§ bit1 y
---
info: Try this: rw [‚Üê @Nat.succ_le_succ_iff]
-- Nat.succ x ‚â§ Nat.succ y
-/
#guard_msgs in
example : ‚àÄ (x y : ‚Ñï), x ‚â§ y := by
  intros x y
  rw? -- Used to be an error here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531
  exact test_sorry

example : ‚àÄ (x y : ‚Ñï), x ‚â§ y := by
  -- Used to be a panic here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531
  success_if_fail_with_msg "Could not find any lemmas which can rewrite the goal" rw?
  exact test_sorry

axiom K : Type
@[instance] axiom K.ring : Ring K

noncomputable def foo : K ‚Üí K := test_sorry

/--
info: Try this: rw [@iff_def]
-- (foo x = 1 ‚Üí ‚àÉ k, x = ‚Üëk) ‚àß ((‚àÉ k, x = ‚Üëk) ‚Üí foo x = 1)
---
info: Try this: rw [@Iff.comm]
-- (‚àÉ k, x = ‚Üëk) ‚Üî foo x = 1
---
info: Try this: rw [@iff_def']
-- ((‚àÉ k, x = ‚Üëk) ‚Üí foo x = 1) ‚àß (foo x = 1 ‚Üí ‚àÉ k, x = ‚Üëk)
---
info: Try this: rw [@iff_eq_eq]
-- (foo x = 1) = ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [@iff_iff_not_or_and_or_not]
-- (¬¨foo x = 1 ‚à® ‚àÉ k, x = ‚Üëk) ‚àß (foo x = 1 ‚à® ¬¨‚àÉ k, x = ‚Üëk)
---
info: Try this: rw [@iff_iff_and_or_not_and_not]
-- (foo x = 1 ‚àß ‚àÉ k, x = ‚Üëk) ‚à® ¬¨foo x = 1 ‚àß ¬¨‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @ofMul_eq_zero]
-- ‚ÜëAdditive.ofMul (foo x) = 0 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @WithTop.coe_eq_one]
-- ‚Üë(foo x) = 1 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @WithTop.one_eq_coe]
-- 1 = ‚Üë(foo x) ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @AddOpposite.op_eq_one_iff]
-- AddOpposite.op (foo x) = 1 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @MulOpposite.op_eq_one_iff]
-- MulOpposite.op (foo x) = 1 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @ofLex_one]
-- foo x = ‚ÜëofLex 1 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @bit1_zero]
-- foo x = bit1 0 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @ofDual_one]
-- foo x = ‚ÜëOrderDual.ofDual 1 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @toMul_zero]
-- foo x = ‚ÜëAdditive.toMul 0 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @neg_one_sq]
-- foo x = (-1) ^ 2 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @Int.cast_one]
-- foo x = ‚Üë1 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê Ring.inverse_one]
-- foo x = Ring.inverse 1 ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @WithBot.unbot_one]
-- foo x = WithBot.unbot 1 _ ‚Üî ‚àÉ k, x = ‚Üëk
---
info: Try this: rw [‚Üê @WithTop.untop_one]
-- foo x = WithTop.untop 1 _ ‚Üî ‚àÉ k, x = ‚Üëk
-/
#guard_msgs in
example : foo x = 1 ‚Üî ‚àÉ k : ‚Ñ§, x = k := by
  rw? -- Used to panic, see https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370598036
  exact test_sorry

lemma six_eq_seven : 6 = 7 := test_sorry

-- This test also verifies that we are removing duplicate results;
-- it previously also reported `Nat.cast_ofNat`
/--
info: Try this: rw [six_eq_seven]
-- ‚àÄ (x : ‚Ñï), x ‚â§ 7
---
info: Try this: rw [‚Üê @Nat.cast_eq_ofNat]
-- ‚àÄ (x : ‚Ñï), x ‚â§ ‚Üë6
-/
#guard_msgs in
example : ‚àÄ (x : ‚Ñï), x ‚â§ 6 := by
  rw?
  guard_target = ‚àÄ (x : ‚Ñï), x ‚â§ 7
  exact test_sorry

/--
info: Try this: rw [six_eq_seven]
-- ‚àÄ (x : ‚Ñï), x ‚â§ 7 ‚Üí x ‚â§ 8
---
info: Try this: rw [‚Üê @Nat.cast_eq_ofNat]
-- ‚àÄ (x : ‚Ñï), x ‚â§ ‚Üë6 ‚Üí x ‚â§ 8
-/
#guard_msgs in
example : ‚àÄ (x : ‚Ñï) (_w : x ‚â§ 6), x ‚â§ 8 := by
  rw?
  guard_target = ‚àÄ (x : ‚Ñï) (_w : x ‚â§ 7), x ‚â§ 8
  exact test_sorry

-- check we can look inside let expressions
/-- info: Try this: rw [@AddCommMonoidWithOne.add_comm]
-- "no goals"
-/
#guard_msgs in
example (n : ‚Ñï) : let y := 3; n + y = 3 + n := by
  rw?

axiom Œ± : Type
axiom f : Œ± ‚Üí Œ±
axiom z : Œ±
axiom f_eq (n) : f n = z

-- Check that the same lemma isn't used multiple times.
-- This used to report two redundant copies of `f_eq`.
-- It be lovely if `rw?` could produce two *different* rewrites by `f_eq` here!
/-- info: Try this: rw [f_eq]
-- z = f m
-/
#guard_msgs in
lemma test : f n = f m := by
  rw?
  rw [f_eq]

-- Check that we can rewrite by local hypotheses.
/-- info: Try this: rw [h]
-- "no goals"
-/
#guard_msgs in
example (h : 1 = 2) : 2 = 1 := by
  rw?

def zero : Nat := 0

-- This used to (incorrectly!) succeed because `rw?` would try `rfl`,
-- rather than `withReducible` `rfl`.
/--
info: Try this: rw [@Nat.le_antisymm_iff]
-- zero ‚â§ 0 ‚àß 0 ‚â§ zero
---
info: Try this: rw [‚Üê @Nat.le_zero]
-- zero ‚â§ 0
---
info: Try this: rw [‚Üê @Nat.lt_one_iff]
-- zero < 1
---
info: Try this: rw [‚Üê @Nat.one_eq_bit1]
-- 1 = bit1 zero
---
info: Try this: rw [‚Üê @Nat.bit1_eq_one]
-- bit1 zero = 1
---
info: Try this: rw [‚Üê @Nat.bit0_eq_zero]
-- bit0 zero = 0
---
info: Try this: rw [‚Üê @Nat.size_eq_zero]
-- Nat.size zero = 0
---
info: Try this: rw [‚Üê @Nat.sqrt_eq_zero]
-- Nat.sqrt zero = 0
---
info: Try this: rw [‚Üê @List.range_eq_nil]
-- List.range zero = []
---
info: Try this: rw [‚Üê @Int.ofNat_eq_zero]
-- ‚Üëzero = 0
---
info: Try this: rw [‚Üê @Nat.pred_eq_self_iff]
-- Nat.pred zero = zero
---
info: Try this: rw [‚Üê @Int.coe_nat_nonpos_iff]
-- ‚Üëzero ‚â§ 0
---
info: Try this: rw [‚Üê @Nat.beq_eq]
-- Nat.beq zero 0 = true
---
info: Try this: rw [‚Üê @Nat.bit0_eq_bit0]
-- bit0 zero = bit0 0
---
info: Try this: rw [‚Üê @Nat.bit1_eq_bit1]
-- bit1 zero = bit1 0
---
info: Try this: rw [‚Üê Nat.beq_eq_true_eq]
-- (zero == 0) = true
---
info: Try this: rw [‚Üê @Nat.dvd_left_iff_eq]
-- ‚àÄ (a : ‚Ñï), a ‚à£ zero ‚Üî a ‚à£ 0
---
info: Try this: rw [‚Üê @Nat.dvd_right_iff_eq]
-- ‚àÄ (a : ‚Ñï), zero ‚à£ a ‚Üî 0 ‚à£ a
---
info: Try this: rw [‚Üê Int.cast_eq_cast_iff_Nat]
-- ‚Üëzero = ‚Üë0
---
info: Try this: rw [‚Üê @not_neZero]
-- ¬¨NeZero zero
-/
#guard_msgs in
example : zero = 0 := by
  rw?
  exact test_sorry
